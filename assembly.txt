Install Velvet:
================

    cd  /root
    curl -O http://www.ebi.ac.uk/~zerbino/velvet/velvet_1.2.10.tgz
    tar xzf velvet_1.2.10.tgz
    cd velvet_1.2.10
    make MAXKMERLENGTH=51
    cp velvet? /usr/local/bin


We’re going to set up a bunch of assemblies in a script called ‘do-assembly.sh’. This will let us execute them in parallel if we want to, and just keep track of things if we don’t want to.

Let’s make sure the file is empty first:
    
    cd /mnt/work
    rm -f do-assembly.sh 

Setting up Velvet runs: 


    for i in *.pe.fq.gz;
    do
        name=$(basename $i .pe.fq.gz);
        pefile=$name.pe.fq.gz
        sefile=$name.se.fq.gz;
        for k in {19..51..2};
        do
            echo "velveth $name.velvet.$k.d $k -fastq.gz -shortPaired $pefile -short $sefile && \
            velvetg $name.velvet.$k.d -exp_cov auto -cov_cutoff auto"
        done
    done >> do-assembly.sh


Now, run them all in parallel:

    parallel -j 4 < do-assembly.sh


or, if you’re memory limited, one by one:

    bash do-assembly.sh


In case partitioning is skipped:
================================

Getting stats for the assemblies:
 
    python /usr/local/share/khmer/sandbox/calc-best-assembly.py -q  *velvet.*.d/contigs.fa  -o best.fa

Generating a final set of contigs:
    
 
    touch testasm 
 
    python /usr/local/share/khmer/sandbox/multi-rename.py testasm  best.fa > final-assembly.fa

After this, ‘final-assembly.fa’ will contain the final set of contigs:

    python /usr/local/share/khmer/sandbox/assemstats3.py 500 *.velvet.*.d/contigs.fa 
